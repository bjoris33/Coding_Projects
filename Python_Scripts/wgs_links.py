# script for creating list of links of download links for database of genomes for gut microbiome
# some of the genomes would have an empty webpage, so their accessions were written to a separate file so they could be manually downloaded 

import xml.etree.ElementTree as ET
import urllib.request, urllib.parse, urllib.error
import ssl
import json

acclist = ['GCF_000010185', 'GCF_000020425', 'GCF_000026505', 'GCF_000144975', 'GCF_000145315', 'GCF_000146325', 'GCF_000146835', 'GCF_000148995', 'GCF_000153885', 'GCF_000154285', 'GCF_000154325', 'GCF_000154385', 'GCF_000154405', 'GCF_000154465', 'GCF_000154505', 'GCF_000154545', 'GCF_000154805', 'GCF_000154825', 'GCF_000154845', 'GCF_000154865', 'GCF_000154985', 'GCF_000155085', 'GCF_000155205', 'GCF_000155435', 'GCF_000155495', 'GCF_000155515', 'GCF_000155815', 'GCF_000155855', 'GCF_000155875', 'GCF_000155955', 'GCF_000155975', 'GCF_000155995', 'GCF_000156015', 'GCF_000156055', 'GCF_000156175', 'GCF_000156215', 'GCF_000156375', 'GCF_000156395', 'GCF_000156515', 'GCF_000156655', 'GCF_000157015', 'GCF_000157035', 'GCF_000157915', 'GCF_000157935', 'GCF_000157955', 'GCF_000157995', 'GCF_000158055', 'GCF_000158075', 'GCF_000158195', 'GCF_000158215', 'GCF_000158235', 'GCF_000158275', 'GCF_000158295', 'GCF_000158315', 'GCF_000158375', 'GCF_000158415', 'GCF_000158435', 'GCF_000158455', 'GCF_000158475', 'GCF_000158495', 'GCF_000158655', 'GCF_000159055', 'GCF_000159175', 'GCF_000159215', 'GCF_000159375', 'GCF_000159415', 'GCF_000159455', 'GCF_000159675', 'GCF_000159715', 'GCF_000159855', 'GCF_000159915', 'GCF_000159975', 'GCF_000160455', 'GCF_000160575', 'GCF_000160595', 'GCF_000160855', 'GCF_000161955', 'GCF_000162075', 'GCF_000162115', 'GCF_000162155', 'GCF_000162215', 'GCF_000162235', 'GCF_000162575', 'GCF_000163075', 'GCF_000163735', 'GCF_000163935', 'GCF_000163955', 'GCF_000165065', 'GCF_000166035', 'GCF_000169015', 'GCF_000169035', 'GCF_000172135', 'GCF_000172175', 'GCF_000173355', 'GCF_000173815', 'GCF_000174195', 'GCF_000177015', 'GCF_000178935', 'GCF_000185345', 'GCF_000185705', 'GCF_000185845', 'GCF_000186505', 'GCF_000186545', 'GCF_000187265', 'GCF_000187895', 'GCF_000188175', 'GCF_000188195', 'GCF_000189615', 'GCF_000190355', 'GCF_000191845', 'GCF_000192165', 'GCF_000195635', 'GCF_000204455', 'GCF_000205165', 'GCF_000209385', 'GCF_000209405', 'GCF_000209425', 'GCF_000210095', 'GCF_000213555', 'GCF_000213575', 'GCF_000218325', 'GCF_000218385', 'GCF_000218405', 'GCF_000218465', 'GCF_000220865', 'GCF_000225705', 'GCF_000227195', 'GCF_000227255', 'GCF_000231275', 'GCF_000233455', 'GCF_000233495', 'GCF_000233955', 'GCF_000234155', 'GCF_000235505', 'GCF_000235885', 'GCF_000236865', 'GCF_000238035', 'GCF_000238615', 'GCF_000238635', 'GCF_000238655', 'GCF_000238675', 'GCF_000238695', 'GCF_000238735', 'GCF_000238755', 'GCF_000239255', 'GCF_000239335', 'GCF_000241405', 'GCF_000242175', 'GCF_000242435', 'GCF_000242955', 'GCF_000243215', 'GCF_000244855', 'GCF_000245775', 'GCF_000250875', 'GCF_000269565', 'GCF_000273525', 'GCF_000285495', 'GCF_000285515', 'GCF_000285535', 'GCF_000285555', 'GCF_000285575', 'GCF_000285835', 'GCF_000296445', 'GCF_000297775', 'GCF_000297815', 'GCF_000308055', 'GCF_000311725', 'GCF_000311845', 'GCF_000311865', 'GCF_000311925', 'GCF_000312005', 'GCF_000312045', 'GCF_000312105', 'GCF_000312125', 'GCF_000312145', 'GCF_000313565', 'GCF_000315485', 'GCF_000320405', 'GCF_000321005', 'GCF_000321025', 'GCF_000321045', 'GCF_000321165', 'GCF_000321185', 'GCF_000321205', 'GCF_000327285', 'GCF_000345485', 'GCF_000349975', 'GCF_000381365', 'GCF_000382465', 'GCF_000398925', 'GCF_000403725', 'GCF_000411235', 'GCF_000411255', 'GCF_000411275', 'GCF_000411295', 'GCF_000411335', 'GCF_000411395', 'GCF_000411415', 'GCF_000411475', 'GCF_000411495', 'GCF_000411535', 'GCF_000412335', 'GCF_000413335', 'GCF_000413355', 'GCF_000413375', 'GCF_000438455', 'GCF_000455245', 'GCF_000455265', 'GCF_000455285', 'GCF_000466385', 'GCF_000466605', 'GCF_000468015', 'GCF_000469305', 'GCF_000469345', 'GCF_000478505', 'GCF_000479045', 'GCF_000479265', 'GCF_000499525', 'GCF_000499785', 'GCF_000507845', 'GCF_000507865', 'GCF_000523555', 'GCF_000527275', 'GCF_000527295', 'GCF_000577335', 'GCF_000582785', 'GCF_000612625', 'GCF_000723585', 'GCF_000741205', 'GCF_000750635', 'GCF_000751555', 'GCF_000751675', 'GCF_000752035', 'GCF_000752215', 'GCF_000752675', 'GCF_000753355', 'GCF_000763055', 'GCF_000820705', 'GCF_000820725', 'GCF_000821085', 'GCF_000821325', 'GCF_000826065', 'GCF_000826085', 'GCF_000826105', 'GCF_000826525', 'GCF_000829905', 'GCF_000942395', 'GCF_000969835', 'GCF_000969845', 'GCF_001025155', 'GCF_001025175', 'GCF_001025195', 'GCF_001049895', 'GCF_001050095', 'GCF_001078425', 'GCF_001182045', 'GCF_001182725', 'GCF_001185345', 'GCF_001243045', 'GCF_001243895', 'GCF_001244405', 'GCF_001244495', 'GCF_001244735', 'GCF_001244995', 'GCF_001282625', 'GCF_001282665', 'GCF_001286805', 'GCF_001299475', 'GCF_001368795', 'GCF_001368835', 'GCF_001375495', 'GCF_001375555', 'GCF_001375675', 'GCF_001403595', 'GCF_001403635', 'GCF_001403875', 'GCF_001407835', 'GCF_001433855', 'GCF_001435475', 'GCF_001435665', 'GCF_001457415', 'GCF_001457795', 'GCF_001457815', 'GCF_001457835', 'GCF_001457875', 'GCF_001458115', 'GCF_001486445', 'GCF_001486505', 'GCF_001486585', 'GCF_001486665', 'GCF_001487105', 'GCF_001487125', 'GCF_001487145', 'GCF_001517625', 'GCF_001517665', 'GCF_001941425', 'GCF_900018785', 'GCF_900021165', 'GCF_900021175', 'GCF_900046455', 'GCF_900046475', 'GCF_900048895', 'GCF_900049755', 'GCF_900059565', 'GCF_900069005', 'GCF_900078195', 'GCF_900078305', 'GCF_900078545', 'GCF_900083545', 'GCF_900086585', 'GCF_900086625', 'GCF_900086655', 'GCF_900086715', 'GCF_900087015', 'GCF_900091655', 'GCF_900091675', 'GCF_900091705', 'GCF_900092335', 'GCF_900095705', 'GCF_900095825', 'GCF_900095835', 'GCF_900095845', 'GCF_900095855', 'GCF_900095865', 'GCF_900095875', 'GCF_900107675', 'GCF_900119705']
# Ignore SSL certificate errors
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

# opens xml file and finds the metadata id and the SRR accession, and then adds them to a dictionary
wgsdl = ''
failed = ''
failedct = 0
successct = 0
for acc in acclist:
    sudoct = 0
    newacc = acc[0:2] + "A" + acc[3:]
    print(newacc)
    url = 'https://www.ebi.ac.uk/ena/data/view/' + newacc + '&display=xml'
    html = urllib.request.urlopen(url, context=ctx).read()
    tree = ET.fromstring(html)
    linklst = tree.findall('ASSEMBLY/ASSEMBLY_LINKS/ASSEMBLY_LINK/URL_LINK')
    for i in linklst:
        link = i.find('URL').text
        if 'fasta' in link:
            sudoct = sudoct + 1
            successct = successct + 1
            wgsdl = wgsdl + link + '\t'
        print(link)
    print(sudoct)
    if sudoct == 0:
        failed = failed + acc + '\t'
        failedct = failedct + 1

fout = open('wgsdl.txt', 'w')
fout.write(wgsdl)

fout = open('failed.txt', 'w')
fout.write(failed)

print('****', failedct, '****')
print('****', successct, '****')
